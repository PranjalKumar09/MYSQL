
NOT NULL
========

$ desc customers;
+-------+--------------+------+-----+---------+-------+
| Field | Type         | Null | Key | Default | Extra |
+-------+--------------+------+-----+---------+-------+
| id    | int          | YES  |     | NULL    |       |
| name  | varchar(100) | YES  |     | NULL    |       |
+-------+--------------+------+-----+---------+-------+

$ insert into customers(id)   values (132);
$ select * from customers;
+------+---------+
| id   | name    |
+------+---------+
|  411 | Pranjal |
|  101 | Ajmal   |
|  132 | NULL    |
+------+---------+

$ insert into customers values(NULL, NULL); 
Possible

    There is no sense in adding the null, to handle this

$ Create table customers 
    (
        id int not null ,
        name varchar(100) not null
    );

$  desc customer2;
+-------+--------------+------+-----+---------+-------+
| Field | Type         | Null | Key | Default | Extra |
+-------+--------------+------+-----+---------+-------+
| id    | int          | NO   |     | NULL    |       |
| name  | varchar(100) | NO   |     | NULL    |       |
+-------+--------------+------+-----+---------+-------+

Now we can't insert the null either way



Default
=======
    While inserting when we not assign value for particular column, default assigned to it. 
    Can used when we know that many will value will same in list

    $ create table customer3 ( id int not null , name varchar(50) not null, acc_type varchar(100) not null default 'Savings'); 

    $ desc customer3;
+----------+--------------+------+-----+---------+-------+
| Field    | Type         | Null | Key | Default | Extra |
+----------+--------------+------+-----+---------+-------+
| id       | int          | NO   |     | NULL    |       |
| name     | varchar(50)  | NO   |     | NULL    |       |
| acc_type | varchar(100) | NO   |     | Savings |       |
+----------+--------------+------+-----+---------+-------+

    $ insert into customer3(id , name) values(123, "Kr");

    $ select * from customer3;
+-----+------+----------+
| id  | name | acc_type |
+-----+------+----------+
| 123 | Kr   | Savings  |
+-----+------+----------+





Primary Key
===========
    The primary key constraint uniquely indentifies each record in table .
    Primary key must contain UNIQUE values , & vannot containe NULL values.
    A table can have only ONE primary key

    $ create table customeers4 ( acc_no int primary key, name varchar(50) not null , acc_type  varchar(50) not null default 'Savuings');

    $  desc customeers4 ;
+----------+-------------+------+-----+----------+-------+
| Field    | Type        | Null | Key | Default  | Extra |
+----------+-------------+------+-----+----------+-------+
| acc_no   | int         | NO   | PRI | NULL     |       |
| name     | varchar(50) | NO   |     | NULL     |       |
| acc_type | varchar(50) | NO   |     | Savuings |       |
+----------+-------------+------+-----+----------+-------+

$ insert into customeers4(acc_no, name) values(001, "Pranjal");

$ select * from customeers4;
+--------+---------+----------+
| acc_no | name    | acc_type |
+--------+---------+----------+
|      1 | Pranjal | Savuings |
+--------+---------+----------+

$ insert into customeers4(acc_no, name) values(001, "Ram");
ERROR 1062 (23000): Duplicate entry '1' for key 'customeers4.PRIMARY'

Primary keys must contain UNIQUE values, and cannot contain NULL values


Auto Increment
---------------
It applies only to primary key 
$ create table customers (acc_no int primary key auto_increment, name varchar(100) not null,  acc_type varchar(50) not null default 'Savings');
$  desc customers;
+----------+--------------+------+-----+---------+----------------+
| Field    | Type         | Null | Key | Default | Extra          |
+----------+--------------+------+-----+---------+----------------+
| acc_no   | int          | NO   | PRI | NULL    | auto_increment |
| name     | varchar(100) | NO   |     | NULL    |                |
| acc_type | varchar(50)  | NO   |     | Savings |                |
+----------+--------------+------+-----+---------+----------------+

$ insert into customers(name) values("Raju"), ("Sham");

$ mysql> select * from customers;
+--------+------+----------+
| acc_no | name | acc_type |
+--------+------+----------+
|      1 | Raju | Savings  |
|      2 | Sham | Savings  |
+--------+------+----------+

$ insert into customers(acc_no , name) values(145,"Baburao"), (121,
"TotolaBhai");
$ select * from customers;
+--------+------------+----------+
| acc_no | name       | acc_type |
+--------+------------+----------+
|      1 | Raju       | Savings  |
|      2 | Sham       | Savings  |
|    121 | TotolaBhai | Savings  |
|    145 | Baburao    | Savings  |
+--------+------------+----------+

$ insert into customers(name) values("Raskhan");
$ select * from customers;
+--------+------------+----------+
| acc_no | name       | acc_type |
+--------+------------+----------+
|      1 | Raju       | Savings  |
|      2 | Sham       | Savings  |
|    121 | TotolaBhai | Savings  |
|    145 | Baburao    | Savings  |
|    146 | Raskhan    | Savings  |
+--------+------------+----------+


Alias
=====
    To do more readable

$ select acc_no as "Account Number" from customers;
+----------------+
| Account Number |
+----------------+
|              1 |
|              2 |
|            121 |
|            145 |
|            146 |
+----------------+

Even more than one poxsib
$ select acc_no as "Account Number", name as "Customer Names" from customers;
+----------------+----------------+
| Account Number | Customer Names |
+----------------+----------------+
|              1 | Raju           |
|              2 | Sham           |
|            121 | TotolaBhai     |
|            145 | Baburao        |
|            146 | Raskhan        |
+----------------+----------------+




DISTINCT
========

    $ select dept from employee2;
+---------+
| dept    |
+---------+
| Loan    |
| Cash    |
| Loan    |
| Account |
| Deposit |
+---------+
5 rows in set (0.00 sec)

    $ select distinct dept from employee2;
+---------+
| dept    |
+---------+
| Loan    |
| Cash    |
| Account |
| Deposit |
+---------+



    When it used with multiple column then only distinct combo will come (means it will not for particular check with all distinct columns)


    $  select fname , lname from employee2;
+---------+---------+
| fname   | lname   |
+---------+---------+
| Raju    | Rastogi |
| Sham    | Mohan   |
| Baburao | Apte    |
| Paul    | Philip  |
| Alex    | Watt    |
| Baburao | Apte    |
+---------+---------+

    $ select distinct fname , lname from employee2;
+---------+---------+
| fname   | lname   |
+---------+---------+
| Raju    | Rastogi |
| Sham    | Mohan   |
| Baburao | Apte    |
| Paul    | Philip  |
| Alex    | Watt    |
+---------+---------+






    ORDER UP
    ========
    Used for sorting 
    For Descending order -> DESC 

    $ select * from employee2 order by fname ;
+--------+---------+---------+------------+---------+
| emp_id | fname   | lname   | desig      | dept    |
+--------+---------+---------+------------+---------+
|    105 | Alex    | Watt    | Associate  | Deposit |
|    103 | Baburao | Apte    | Associate  | Loan    |
|    106 | Baburao | Apte    | Casier     | Account |
|    104 | Paul    | Philip  | Accountant | Account |
|    101 | Raju    | Rastogi | Manager    | Loan    |
|    102 | Sham    | Mohan   | Casier     | Cash    |
+--------+---------+---------+------------+---------+

    $ select * from employee2 order by fname desc ;
+--------+---------+---------+------------+---------+
| emp_id | fname   | lname   | desig      | dept    |
+--------+---------+---------+------------+---------+
|    102 | Sham    | Mohan   | Casier     | Cash    |
|    101 | Raju    | Rastogi | Manager    | Loan    |
|    104 | Paul    | Philip  | Accountant | Account |
|    103 | Baburao | Apte    | Associate  | Loan    |
|    106 | Baburao | Apte    | Casier     | Account |
|    105 | Alex    | Watt    | Associate  | Deposit |
+--------+---------+---------+------------+---------+


    Now we can do do sorting by prefrence also   ORDER BY   column1 ,column2 ---;

    column1 is sorted first , then if column1 same then rest column2 prefer like this continues.



LIKE
=====
    Even works bettwer with different case (lowercase or uppercase)

    $ select * from  employees;
+--------+--------+------------+---------+
| emp_id | name   | desig      | dept    |
+--------+--------+------------+---------+
|    101 | Raju   | Manager    | Loan    |
|    103 | Paul   | Associate  | IT      |
|    104 | Alex   | Accountant | Account |
|    105 | Victor | Associate  | Deposit |
+--------+--------+------------+---------+

    $ select * from employees where desig likeZ;
+--------+------+---------+------+
| emp_id | name | desig   | dept |
+--------+------+---------+------+
|    101 | Raju | Manager | Loan |
+--------------------------------+


    $ select * from  employees where name like "_a__";
+--------+------+-----------+------+
| emp_id | name | desig     | dept |
+--------+------+-----------+------+
|    101 | Raju | Manager   | Loan |
|    103 | Paul | Associate | IT   |
+--------+------+-----------+------+

    $ select * from employee2  where fname like "L*" or fname like "%s"1 row in set (0.01 sec)


LIMIT 
=====
    Its for showing only limited columns

    $ select * from  employee2 ;
+--------+---------+----------+------------+------------+
| emp_id | fname   | lname    | desig      | dept       |
+--------+---------+----------+------------+------------+
|    101 | Raju    | Rastogi  | Manager    | Loan       |
|    102 | Sham    | Mohan    | Casier     | Cash       |
|    103 | Baburao | Apte     | Associate  | Loan       |
|    104 | Paul    | Philip   | Accountant | Account    |
|    105 | Alex    | Watt     | Associate  | Deposit    |
|    106 | Baburao | Apte     | Casier     | Account    |
|    107 | James   | Moore    | Assistant  | HR         |
|    108 | David   | Brown    | Consultant | Sales      |
|    109 | David   | Davis    | Cashier    | Sales      |
|    110 | David   | Smith    | Analyst    | Operations |
|    111 | Michael | Brown    | Assistant  | Credit     |
|    112 | Lisa    | Miller   | Officer    | Sales      |
|    113 | Emily   | Johnson  | Clerk      | Accounts   |
|    114 | John    | Wilson   | Executive  | Compliance |



    $  select * from  employee2 limit 4 ;
+--------+---------+---------+------------+---------+
| emp_id | fname   | lname   | desig      | dept    |
+--------+---------+---------+------------+---------+
|    101 | Raju    | Rastogi | Manager    | Loan    |
|    102 | Sham    | Mohan   | Casier     | Cash    |
|    103 | Baburao | Apte    | Associate  | Loan    |
|    104 | Paul    | Philip  | Accountant | Account |
+--------+---------+---------+------------+---------+


    It can also be used with two to perform as range 
    LIMIT <start-1>, <no of terms> ;


   $ select * from  employee2 limit 4,5;
+--------+---------+---------+------------+------------+
| emp_id | fname   | lname   | desig      | dept       |
+--------+---------+---------+------------+------------+
|    105 | Alex    | Watt    | Associate  | Deposit    |
|    106 | Baburao | Apte    | Casier     | Account    |
|    107 | James   | Moore   | Assistant  | HR         |
|    108 | David   | Brown   | Consultant | Sales      |
|    109 | David   | Davis   | Cashier    | Sales      |
+--------+---------+---------+------------+------------+
 

   $ select * from employee2 order by fname desc limit 1;
+--------+-------+-------+--------+------+--------+
| emp_id | fname | lname | desig  | dept | salary |
+--------+-------+-------+--------+------+--------+
|    102 | Sham  | Mohan | Casier | Cash |  25000 |
+--------+-------+-------+--------+------+--------+




    COUNT 
    ====== 

   $  select count(*) from employees;
+----------+
| count(*) |
+----------+
|        4 |
+----------+

    $ select count(name) from employees;
+-------------+
| count(name) |
+-------------+
|           4 |
+-------------+


    $ select count(desig) from employees;
+--------------+
| count(desig) |
+--------------+
|            4 |
+--------------+

    To select the disctinct the desig;
    $ select count(distinct desig) from employees;
+-----------------------+
| count(distinct desig) |
+-----------------------+
|                     3 |
+-----------------------+

    Also can used in conditional counts 
    $ select count(*) from employee2 where dept="HR";
+----------+
| count(*) |
+----------+
|       27 |
+----------+


    GROUP BY
    ----- --
    =========

    $ SELECT DEPT  FROM employee2 GROUP by dept;
+------------+
| DEPT       |
+------------+
| Loan       |
| Cash       |
| Account    |
| Deposit    |
| HR         |
| Sales      |
| Operations |
| Credit     |
| Accounts   |
| Compliance |
| IT         |
| Loans      |
+------------+

    $ SELECT DEPT , COUNT(FNAME) from employee2 group by dept;
+------------+--------------+
| DEPT       | COUNT(FNAME) |
+------------+--------------+
| Loan       |            2 |
| Cash       |            1 |
| Account    |            2 |
| Deposit    |            1 |
| HR         |           27 |
| Sales      |           38 |
| Operations |           34 |
| Credit     |           40 |
| Accounts   |           44 |
| Compliance |           41 |
| IT         |           42 |
| Loans      |           34 |
+------------+--------------+

    Agrreate function dont work in ditinct , by it work in group by




    MAX & MIN
    ===========
    
        $  select max(salary) from employee2;
+-------------+
| max(salary) |
+-------------+
|       99978 |
+-------------+
1 row in set (0.00 sec)

     $ select min(salary) from employee2;
+-------------+
| min(salary) |
+-------------+
|       10651 |
+-------------+





    SUB QUERIS
    ============
    $ select emp_id , fname ,  salary from employee2 where salary = (select max(salary) from employee2);
+--------+-------+--------+
| emp_id | fname | salary |
+--------+-------+--------+
|    329 | Sarah |  99978 |
+--------+-------+--------+



    SUM & AVG
    =========
     $ select sum(salary) from employee2;
+-------------+
| sum(salary) |
+-------------+
|    16663255 |
+-------------+

    $  select avg(salary) from employee2;
+-------------+
| avg(salary) |
+-------------+
|  54455.0817 |
+-------------+


    $  SELECT dept ,COUNT(emp_id), SUM(salary) from employee2 group by dept;
+------------+---------------+-------------+
| dept       | COUNT(emp_id) | SUM(salary) |
+------------+---------------+-------------+
| Loan       |             2 |       91208 |
| Cash       |             1 |       12300 |
| Account    |             2 |       84997 |
| Deposit    |             1 |       23945 |
| HR         |            27 |     1337107 |
| Sales      |            38 |     2059159 |
| Operations |            34 |     2039809 |
| Credit     |            40 |     1969506 |
| Accounts   |            44 |     2534715 |
| Compliance |            41 |     2219227 |
| IT         |            42 |     2326295 |
| Loans      |            34 |     1964987 |
+------------+---------------+-------------+

    
    Sum by conditions

    $ select sum(salary) from employee2 where dept="Loan";
+-------------+
| sum(salary) |
+-------------+
|       91208 |
+-------------+





DEFAULT and ON UPDATE 
=====================
    $ create table blogs( blog varchar(150), 
    ct datetime default current_timestamp, 
    ut datetime on update current_timestamp);

    This can use in like in tweets ine time stamp created on creation time , other when we are updating (on update).

    $ insert into blogs (blog) values("First Blog");
    $ select * from blogs;
+------------+---------------------+------+
| blog       | ct                  | ut   |
+------------+---------------------+------+
| First Blog | 2024-08-30 21:40:43 | NULL |
+------------+---------------------+------+

    $ update blogs set blog= "First Blog Updated";
    $ select * from blogs;
+--------------------+---------------------+---------------------+
| blog               | ct                  | ut                  |
+--------------------+---------------------+---------------------+
| First Blog Updated | 2024-08-30 21:40:43 | 2024-08-30 21:41:50 |
+--------------------+---------------------+---------------------+
 
    


IN and NOT IN
===============
    $ SELECT * from employee2 where fname in ('Jane' ,'David') limit 10; 
+--------+-------+----------+------------+------------+--------+
| emp_id | fname | lname    | desig      | dept       | salary |
+--------+-------+----------+------------+------------+--------+
|    108 | David | Brown    | Consultant | Sales      |  96017 |
|    109 | David | Davis    | Cashier    | Sales      |  93030 |
|    110 | David | Smith    | Analyst    | Operations |  57979 |
|    122 | Jane  | Johnson  | Executive  | Loans      |  38414 |
|    129 | Jane  | Brown    | Consultant | Compliance |  84416 |
|    131 | Jane  | Jones    | Officer    | Compliance |  17439 |
|    137 | Jane  | Jones    | Officer    | Compliance |  31988 |
|    140 | David | Miller   | Executive  | HR         |  60610 |
|    154 | Jane  | Miller   | Clerk      | Operations |  56079 |
|    159 | David | Williams | Officer    | IT         |  97338 |
+--------+-------+----------+------------+------------+--------+

    $ SELECT * from employee2 where fname not in ('Jane' ,'David') limit
+--------+---------+---------+------------+----------+--------+
| emp_id | fname   | lname   | desig      | dept     | salary |
+--------+---------+---------+------------+----------+--------+
|    101 | Raju    | Rastogi | Manager    | Loan     |  68647 |
|    102 | Sham    | Mohan   | Casier     | Cash     |  12300 |
|    103 | Baburao | Apte    | Associate  | Loan     |  22561 |
|    104 | Paul    | Philip  | Accountant | Account  |  23032 |
|    105 | Alex    | Watt    | Associate  | Deposit  |  23945 |
|    106 | Baburao | Apte    | Casier     | Account  |  61965 |
|    107 | James   | Moore   | Assistant  | HR       |  37101 |
|    111 | Michael | Brown   | Assistant  | Credit   |  86744 |
|    112 | Lisa    | Miller  | Officer    | Sales    |  47637 |
|    113 | Emily   | Johnson | Clerk      | Accounts |  22605 |
+--------+---------+---------+------------+----------+--------+




BETWEEN
=======
    Employees whoes salary is more than 10000 and Less than 40000;

    $ SELECT * from employee2 where salary<=40000 and salary>=10000;
    $ SELECT * from employee2 where salary between 10000 and 40000 ;
    both work same ranges included too.


CASE 
=====
    $ select  emp_id , fname , 
    case 
        when salary >= 40000 then "High Salary"
        else "Low Salary"
    end as "Salary Category"
    from employee2;

+--------+---------+-----------------+
| emp_id | fname   | Salary Category |
+--------+---------+-----------------+
|    101 | Raju    | High Salary     |
|    102 | Sham    | Low Salary      |
|    103 | Baburao | Low Salary      |
|    104 | Paul    | Low Salary      |
|    105 | Alex    | Low Salary      |
+--------+---------+-----------------+


    $ select  emp_id , fname , case 
    when salary >= 70000 then "High Salary" 
    WHEN salary >= 35000 then "Mid Salary" 
    else "Low Salary" end as "Salary Category" 
    from employee2 LIMIT 10;
+--------+---------+-----------------+
| emp_id | fname   | Salary Category |
+--------+---------+-----------------+
|    101 | Raju    | Mid Salary      |
|    102 | Sham    | Low Salary      |
|    103 | Baburao | Low Salary      |
|    104 | Paul    | Low Salary      |
|    105 | Alex    | Low Salary      |
|    106 | Baburao | Mid Salary      |
|    107 | James   | Mid Salary      |
|    108 | David   | High Salary     |
|    109 | David   | High Salary     |
|    110 | David   | Mid Salary      |
+--------+---------+-----------------+

    $ select emp_id , case when salary != 0 then salary/80 end as "Salary in Dollar" from employee2;
+--------+------------------+
| emp_id | Salary in Dollar |
+--------+------------------+
|    102 |         153.7500 |
|    103 |         282.0125 |
|    101 |         858.0875 |
+--------+------------------+


ISNULL  & NOR LIKE
==================
    Is null give true on null values 
    $ select * from employee2  where fname is null;


    $ select * from employee2  where fname like "R%";
+--------+-------+---------+---------+------+--------+
| emp_id | fname | lname   | desig   | dept | salary |
+--------+-------+---------+---------+------+--------+
|    101 | Raju  | Rastogi | Manager | Loan |  68647 |
+--------+-------+---------+---------+------+--------+

    $ select * from employee2  where fname not  like "R%";
+--------+---------+----------+------------+------------+--------+
| emp_id | fname   | lname    | desig      | dept       | salary |
+--------+---------+----------+------------+------------+--------+
|    102 | Sham    | Mohan    | Casier     | Cash       |  12300 |
|    103 | Baburao | Apte     | Associate  | Loan       |  22561 |
|    104 | Paul    | Philip   | Accountant | Account    |  23032 |
|    105 | Alex    | Watt     | Associate  | Deposit    |  23945 |
+--------+---------+----------+------------+------------+--------+




UNIQUE CONSTRAINT
=================
    Constrain are additonaly fewautres to given to columns, all values in colun are uniquely
    $ create  table contact (mob varchar(14) unique);

CHECK CONSTRAINT
=================
    Like checking phone no of 10 digits ;

    $ create table contacts(name varchar(50), mob varchar(15) unique check (length(mob) >= 10));
    
    Now to third person he could'nt able to understand why this error happens
    $ insert into contacts values("james" , "091234");
ERROR 3819 (HY000): Check constraint 'contacts_chk_1' is violated.
    
    
    To above case 
    $ create table contacts2(
        name varchar(50), 
        mob varchar(15) unique, 
        constraint mob_no_less_than_10_digits check (length(mob) >= 10));

    $ insert into contacts2 values("james" , "091234");
ERROR 3819 (HY000): Check constraint 'mob_no_less_than_10_digits' is violated.




ALTER 
=====
    Adding/droping
    --------------
    It is for changing structure of table (adding or droping the table)


    $ ALTER TABLE contacts ADD  city varchar(40);
    
    ALTER TABLE table_name ADD column_name datatype; 
    
    $ alter table contacts drop column city;


    Rename
    ------
    Renaming Column Name : ALTER TABLE bankTable RENAME COLUMN old_emp TO emp_id;
    Renaming Table Name : 
        Method 1 => ALTER TABLE bankTable RENAME To bankTableNew;
        Method 2 => RENAME TABLE bankTable  To bankTableNew;


    If repective column has used in some constraint then we must delete that first in order to delete it .


    MODIFY
    ------
    like chaning datatype , Extra, Default of columns;

    ALTER TABLE  TableName  COLUMN  ColumnName  ----;

    $ alter table temp2 modify Id INT NOT NULL;



IFNULL 
=======
    $ select id, cash ; 
    Null values can come also 

    $ select id, ifnull(cash,0) ; 
    0 will replace in null values


ROLL UP
======= 
    Always used with group by only
    $ SELECT name, SUM(fees) 
FROM school
GROUP BY name WITH ROLLUP;

+--------+-----------+
| name   | SUM(fees) |
+--------+-----------+
| ajay   |        20 |
| sanjay |        53 |
| vijay  |        25 |
| NULL   |        98 |
+--------+-----------+

    $ SELECT IFNULL(name, "TOTAL"), SUM(fees) 
FROM school
GROUP BY name WITH ROLLUP;

+--------+-----------+
| name   | SUM(fees) |
+--------+-----------+
| ajay   |        20 |
| sanjay |        53 |
| vijay  |        25 |
| TOTAL  |        98 |
+--------+-----------+



STORED ROUNTINE
===============
    An SQL statement or set of SQL statements that can be stored on database server which can be call no of times 
    
    Types of STORED ROUNTINE
        * STORED Procedure
        * User Defined functions

    STORED PROCEDURE 
    ================
        These are rountines that contain SQL statements & logic 
        Often used for performing data modification , trasaction control, & executing sequences of statements 

        now if we want to do this command small -> select * from customers order by acc_type;

        # changing the delimiter $$
        $ delimiter $$
        $ create procedure emp_info()
            begin
            select * from customers order by acc_type;
            end $$
        $ delimiter ;
        $ call emp_info();
+--------+------------+----------+
| acc_no | name       | acc_type |
+--------+------------+----------+
|      1 | Raju       | Savings  |
|      2 | Sham       | Savings  |
|    121 | TotolaBhai | Savings  |
|    145 | Baburao    | Savings  |
|    146 | Raskhan    | Savings  |
+--------+------------+----------+

        
        Argument passing  like $ select * from customers where name="Baburao";
        $  delimiter $$
        $ create procedure emp_info2(in p_fname varchar(50)) begin select * from customers where name=p_fname; end$$
        $ delimiter ;

        $ call emp_info2("Raju");
        $ call emp_info2("Baburao");


    

        We can even get ouptut also .

        $  create procedure get_sum_by_dept8
            (in p_dept varchar(100), out p_sum decimal(10,2)) 
            begin 
                select sum(salary) into p_sum from employees 
                where dept=p_dept; 
            end$$

        $ SET @emp_sum = 0;
        $ CALL get_sum_by_dept8('HR', @emp_sum);

        $ SELECT @emp_sum;
+------------+
| @emp_sum   |
+------------+
| 1249006.87 |
+------------+







USER DEFINED FUNCTIONS
======================= 
    * Unlinke in brackets we just take inputs 

    $ DELIMITER $$

CREATE FUNCTION emp_name_max_salary() RETURNS VARCHAR(50)
DETERMINISTIC
NO SQL
READS SQL DATA
BEGIN
    DECLARE v_max DECIMAL(10,2);
    DECLARE v_name VARCHAR(50);

    -- Find the maximum salary
    SELECT MAX(salary) INTO v_max FROM employee;

    -- Debug: Ensure v_max is not NULL
    IF v_max IS NULL THEN
        RETURN 'No data';
    END IF;

    -- Get the name of the employee with that maximum salary
    SELECT fname INTO v_name FROM employee
        WHERE salary = v_max
        LIMIT 1; -- Return only one employee if there are ties

    -- Debug: Ensure v_name is not NULL
    IF v_name IS NULL THEN
        RETURN 'No name found';
    END IF;

    RETURN v_name;
END$$

DELIMITER ;

    END $$
    $ DELIMITER ;


    $ DROP FUNCTION IF EXISTS emp_name_max_salary;
    # to delete it if function exist 

    




WINDOW FUNCTION
===============
    Also know as analytic , functions allow you to perform functions allow you to perform  calculations across set of rows related to current row. It provide better visiblity 
    Defined by   OVER()   clause 

    OVER have its own functions like ROW_NUMBER, RANK , DENSERANK ,LAG ,LEAD 

    $  select sum(salary) from employee;
+-------------+
| sum(salary) |
+-------------+
|  7322803.61 |
+-------------+


    $ select sum(salary) over() as sum_salary from employee;
+------------+
| sum_salary |
+------------+
| 7322803.61 |
| 7322803.61 |
| 7322803.61 |
| 7322803.61 |
| 7322803.61 |
| 7322803.61 |
| 7322803.61 |
| 7322803.61 |
| 7322803.61 |
+------------+


    $ select fname ,salary  ,sum(salary) over() as sum_salary from employee;
+---------+-----------+------------+
| fname   | salary    | sum_salary |
+---------+-----------+------------+
| Michael | 103384.11 | 7322803.61 |
| Anna    |  70904.88 | 7322803.61 |
| Sarah   |  33477.43 | 7322803.61 |
| Laura   |  89394.96 | 7322803.61 |
| Laura   |  90606.97 | 7322803.61 |
+---------+-----------+------------+

    $ select fname ,salary  ,sum(salary) over(order by emp_id) as sum_salary from employee;
+---------+-----------+------------+
| fname   | salary    | sum_salary |
+---------+-----------+------------+
| Michael | 103384.11 |  103384.11 |
| Anna    |  70904.88 |  174288.99 |
| Sarah   |  33477.43 |  207766.42 |
| Laura   |  89394.96 |  297161.38 |
| Laura   |  90606.97 |  387768.35 |
    '            '           '
+---------+-----------+------------+



# PARTITION not only devide but also sort according to field 
    $ SELECT fname, 
       salary, 
       SUM(salary) OVER (PARTITION BY dept_name) AS sum_salary 
FROM employee;
+---------+-----------+------------+
| fname   | salary    | sum_salary |
+---------+-----------+------------+
| Alex    |  48360.84 | 1685442.62 |
| Chris   |  73737.61 | 1685442.62 |
| Michael |  38259.50 | 1249006.87 |
| Emily   |  87685.61 | 1249006.87 |
| Jane    |  44057.78 | 1249006.87 |
+---------+-----------+------------+

    $ SELECT fname, 
       salary, 
       MAX(salary) OVER (PARTITION BY dept_name) AS sum_salary 
FROM employee;
+---------+-----------+------------+
| fname   | salary    | sum_salary |
+---------+-----------+------------+
| Alex    |  48360.84 |  109953.06 |
| Chris   |  86914.53 |  109953.06 |
| Michael |  38259.50 |  112657.43 |
| Chris   |  96339.78 |  112657.43 |
| Emily   |  87685.61 |  112657.43 |
| Jane    |  44057.78 |  112657.43 |
+---------+-----------+------------+

    $  SELECT ROW_NUMBER() OVER() as row_no,emp_id, fname,  dept_name  , salary  FROM employee;
+--------+--------+---------+-----------+-----------+
| row_no | emp_id | fname   | dept_name | salary    |
+--------+--------+---------+-----------+-----------+
|      1 |      1 | Michael | Marketing | 103384.11 |
|      2 |      2 | Anna    | Marketing |  70904.88 |
|      3 |      3 | Sarah   | IT        |  33477.43 |
|      4 |      4 | Laura   | HR        |  89394.96 |
|      5 |      5 | Laura   | Finance   |  90606.97 |
|      6 |      6 | Michael | Sales     |  41836.26 |
|      7 |      7 | David   | HR        |  70946.57 |
|      8 |      8 | Jane    | Sales     |  49905.65 |
|      9 |      9 | Laura   | Sales     |  66410.64 |
|     10 |     10 | Jane    | IT        |  53452.60 |
|     11 |     11 | Emily   | IT        |  93738.44 |
|     12 |     12 | David   | Finance   |  90345.14 |
|     13 |     13 | John    | HR        | 101156.76 |
+--------+--------+---------+-----------+-----------+

    $ SELECT ROW_NUMBER() OVER(ORDER BY salary) as row_no,emp_id, fname,  dept_name  , salary  FROM employee;
+--------+--------+---------+-----------+-----------+
| row_no | emp_id | fname   | dept_name | salary    |
+--------+--------+---------+-----------+-----------+
|      1 |     53 | Alex    | Sales     |  30560.46 |
|      2 |     89 | David   | Sales     |  31865.14 |
|      3 |     78 | Jane    | Sales     |  31868.27 |
|      4 |     98 | David   | Sales     |  32960.48 |
|      5 |      3 | Sarah   | IT        |  33477.43 |
|      6 |     83 | Jane    | IT        |  36367.22 |
|      7 |     30 | Michael | HR        |  38259.50 |
|      8 |     23 | Sarah   | Finance   |  39339.81 |
|      9 |     50 | Michael | HR        |  39543.20 |
|     10 |     60 | David   | Finance   |  39768.75 |
+--------+--------+---------+-----------+-----------+
 
    $ SELECT ROW_NUMBER() OVER(PARTITION BY dept_name) as row_no,emp_id, fname,  dept_name  , salary  FR
OM employee;

+--------+--------+---------+-----------+-----------+
| row_no | emp_id | fname   | dept_name | salary    |
+--------+--------+---------+-----------+-----------+
|      1 |     14 | Alex    | Finance   |  48360.84 |
|      2 |     32 | Chris   | Finance   |  86914.53 |
|      3 |     33 | David   | Finance   | 103383.27 |
|      4 |     87 | Sarah   | Finance   |  64405.16 |
|      5 |     23 | Sarah   | Finance   |  39339.81 |
|      6 |     77 | John    | Finance   |  77434.61 |
|      7 |     21 | Jane    | Finance   |  50253.22 |
|      8 |     72 | Laura   | Finance   | 109953.06 |
|      9 |     27 | David   | Finance   |  99127.74 |
|     10 |     36 | David   | Finance   |  77599.28 |
|     11 |     82 | David   | Finance   |  85992.94 |
|     12 |     91 | Michael | Finance   |  83047.85 |
|     13 |     56 | Jane    | Finance   |  62197.67 |
|     14 |     45 | Anna    | Finance   |  62930.83 |
|     15 |     12 | David   | Finance   |  90345.14 |
|     16 |     40 | Michael | Finance   |  96373.17 |
|     17 |     96 | John    | Finance   |  46904.77 |
|     18 |     60 | David   | Finance   |  39768.75 |
|     19 |     80 | Anna    | Finance   |  71483.74 |
|     20 |     99 | Alex    | Finance   |  60035.69 |
|     21 |      5 | Laura   | Finance   |  90606.97 |
|     22 |     42 | Chris   | Finance   |  73737.61 |
|     23 |     66 | Jane    | Finance   |  65245.97 |
|      1 |     30 | Michael | HR        |  38259.50 |
|      2 |     31 | Chris   | HR        |  96339.78 |
|      3 |     22 | Emily   | HR        |  87685.61 |
|      4 |     79 | Jane    | HR        |  44057.78 |
|      5 |     44 | Sarah   | HR        | 112657.43 |
|      6 |     43 | Michael | HR        |  44094.82 |
|      7 |     48 | Emily   | HR        |  91942.93 |
|      8 |     26 | Alex    | HR        |  87977.22 |
|      9 |     50 | Michael | HR        |  39543.20 |
|     10 |     90 | Alex    | HR        |  98262.75 |
+--------+--------+---------+-----------+-----------+


    Note-> In AS we cant use same pre defiened name 


    1 came everywhere because we didnt said how to select rank 
    $ SELECT emp_id, fname,  dept_name  , salary, RANK() OVER() AS rank_no  FROM employee;
+--------+---------+-----------+-----------+---------+
| emp_id | fname   | dept_name | salary    | rank_no |
+--------+---------+-----------+-----------+---------+
|      1 | Michael | Marketing | 103384.11 |       1 |
|      2 | Anna    | Marketing |  70904.88 |       1 |
|      3 | Sarah   | IT        |  33477.43 |       1 |
|      4 | Laura   | HR        |  89394.96 |       1 |
|      5 | Laura   | Finance   |  90606.97 |       1 |
|      6 | Michael | Sales     |  41836.26 |       1 |
|      7 | David   | HR        |  70946.57 |       1 |
+--------+---------+-----------+-----------+---------+

    If two values have same Criteria value then both have same rank , next value have rank according to there position not according to previous rank. 
    $  SELECT emp_id, fname,  dept_name  , salary, RANK() OVER(ORDER BY salary) AS rank_no  FROM employee;
+--------+---------+-----------+-----------+---------+
| emp_id | fname   | dept_name | salary    | rank_no |
+--------+---------+-----------+-----------+---------+
|     53 | Alex    | Sales     |  30560.46 |       1 |
|     89 | David   | Sales     |  31865.14 |       2 |
|     78 | Jane    | Sales     |  31865.14 |       2 |
|     98 | David   | Sales     |  32960.48 |       4 |
|      3 | Sarah   | IT        |  33477.43 |       5 |
+--------+---------+-----------+-----------+---------+

    $ SELECT emp_id, fname,  dept_name  , salary, RANK() OVER(ORDER BY salary) AS rank_no  FROM employee;

+--------+---------+-----------+-----------+---------+
| emp_id | fname   | dept_name | salary    | rank_no |
+--------+---------+-----------+-----------+---------+
|     53 | Alex    | Sales     |  30560.46 |       1 |
|     89 | David   | Sales     |  31865.14 |       2 |
|     78 | Jane    | Sales     |  31865.14 |       3 |
|     98 | David   | Sales     |  32960.48 |       4 |
|      3 | Sarah   | IT        |  33477.43 |       5 |
+--------+---------+-----------+-----------+---------+

    Lag, Leads applies to any single element
    $ SELECT emp_id, fname,  dept_name  , salary, LAG(salary) OVER() AS lagg  FROM employee;
+--------+---------+-----------+-----------+-----------+
| emp_id | fname   | dept_name | salary    | lagg      |
+--------+---------+-----------+-----------+-----------+
|      1 | Michael | Marketing | 103384.11 |      NULL |
|      2 | Anna    | Marketing |  70904.88 | 103384.11 |
|      3 | Sarah   | IT        |  33477.43 |  70904.88 |
|      4 | Laura   | HR        |  89394.96 |  33477.43 |
|      5 | Laura   | Finance   |  90606.97 |  89394.96 |
+--------+---------+-----------+-----------+-----------+

    $  SELECT emp_id, fname,  dept_name  , salary, LEAD(salary) OVER() AS lagg  FROM employee;
+--------+---------+-----------+-----------+-----------+
| emp_id | fname   | dept_name | salary    | lagg      |
+--------+---------+-----------+-----------+-----------+
|      1 | Michael | Marketing | 103384.11 |  70904.88 |
|      2 | Anna    | Marketing |  70904.88 |  33477.43 |
|     97 | John    | IT        |  33477.43 |  32960.48 |
|     98 | David   | Sales     |  32960.48 | 104924.57 |
|    100 | Michael | IT        | 104924.57 |      NULL |
+--------+---------+-----------+-----------+-----------+

    $ SELECT emp_id, fname,  dept_name  , salary, salary - lag(salary) OVER(order by salary desc) AS lagg  FROM employee;

+--------+---------+-----------+-----------+----------+
| emp_id | fname   | dept_name | salary    | lagg     |
+--------+---------+-----------+-----------+----------+
|     62 | Anna    | Marketing | 118328.11 |     NULL |
|     25 | Jane    | IT        | 117810.31 |  -517.80 |
|     94 | Laura   | Sales     | 113070.33 | -4739.98 |
|     51 | Laura   | Marketing | 113001.73 |   -68.60 |
|     44 | Sarah   | HR        | 112657.43 |  -344.30 |
+--------+---------+-----------+-----------+----------+
    

